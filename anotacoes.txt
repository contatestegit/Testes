contatestegit
cara_de_comida@yahoo.com.br

Referência 	imasters
			bitbucket
		   	git para corajosos Rebase (Parte 1)
			tableless.com.br
			mundodocker.com.br
			https://astaxie.gitbooks.io/build-web-application-with-golang/pt-br/06.1.html
			Alura
			Udemy



git log --graph --oneline

Utilizando o GitHub

-> Criando Repositórios Remotos 
Comando: git remote 
	Verificar quais são os repositórios remotos existentes. Quando clonamos um repositório, temos ao menos um remote chamado "Origin".
	
Comando: git remote add (nome_do_repositório) (URL_do_repositório)
	Adicionar um repositório

Comando: git remote -v
	Mostra a URL em que o repositório foi armazenado.

-> Git Fetch
	Faz o Download de novos dados do repositório remoto mas não realiza o merge com os dados do repositório local.

-> Git Merge
	Se uma linha aparecer nos dois arquivos então ela deverá ser mantida no arquivo final.
	Se uma linha aparecer no arquivo original mas tiver sido excluida em um dos arquivos dos colaboradores, então devemos excluí-la do arquivo final.
	Se uma linha aparecer no arquivo de um dos colaboradores mas não estiver no arquivo original, então ela deve ser mantida no final.

	Quando fazemos o merge, o histórico de commits de ambos os branches são acoplados.

	git checkout Feature
	git merge master -> estamos acoplando o branch feature com a master

	Conflitos de merge:
		Quando receber um conflito seguir os seguintes passos 
		1) git merge --abort para retornar os arquivos ao estado antes do comando merge;
		2) verificar o estados dos arquivos usando git log e git diff;
		3) criar um commit com as mudanças realizadas;
		4) tente realizar o merge novamente;

		Se rodarmos o comando git log novamente, teremos a mensagem informando que acabamos de realizar um merge

	Bonus: git show (id_do_commit) 
		Mostra as diferenças entre o commit e seu pai;

Comando: git merge (nome_dos_branches_que_deseja_fazer_o_merge) 
	Obs: O branch que estamos também será incluido no merge

-> Git Pull  
Comando: git pull (nome_do_repositório_remoto) (nome_do_repositório_local)

	Este comando irá sincronizar o repositório remoto com o repostório local. Além disso, ele tenta realizar um merge entre as mudanças remotas e locais. Podem ocorrer "merge conflicts" 
 
-> Git Push    	
	Se quisermos mandar para o repositório remoto nossas mudanças usaremos o seguinte comando:
Comando: git push (nome_do_repositório_remoto) (nome_do_repositório_local)

Obs: Temos que executar o git pull antes. Isso é uma forma de termos o repositório local sempre atualizado e evitarmos possíveis conflitos entre os projetos.

Mas antes devemos lembrar de:
Adicionar as mudanças feitas para a staged area
Fazer o commit das mudanças 

-> Git Fork
	Isso deve ser feito diretamente no repositório remoto. O fork é uma ferramenta que permite realizar uma cópia de um repositório de outra pessoa
	para o seu com apenas um clique. 

-> Git Rebase
	Essa alternativa moverá todos os commits realizados na branch auxiliar para a extremidade da master (se estiver sendo feito o merge com a master). 
	Dessa forma obteremos um histórico linear das mudanças realizadas
	
	Nao utilizar em branches públicos 

	Force Pushing
		Se tentarmos fazer um "Push" da branch na qual foi realizada o rebase para o repositório remoto, o git irá impedir a ação.
		Podemos então forçar essa ação usando o comando git push --force.
		Isso no entanto poderá ocasionar uma confusão nas outras pessoas que estão trabalhando, então é necessário ter certo cuidado com esse comando.

-> Pull Requests
-> Merge Request
-> Criação de Feature Branches 
	1) Introduzir novas funcionalidades; (Feature)
	2) Corrigir comportamento inesperado; (bug)
	3) Alterar a forma, mantendo o comportamento(refatoração); (refactor)

-> Passo a Passo de Como Subir as Atualizações do Branch para O repositório remoto
	1) Utilizar o git add para jogar os arquivos modificados para a área de preparação
	2) Fazer o commit das mudanças realizadas
	3) NO SEU BRANCH DE TRABALHO fazer o push force usando o comando git push -f
	4) Agora sim podemos fazer a mudança para a master
	5) NA MASTER, fazemos o git pull para verificar se há atualizações disponíveis
	6) Em seguida fazemos o git pull --rebase
	7) Fazemos uma nova troca para o SEU BRANCH DE TRABALHO
	8) Agora fazemos o rebase dentro do branch de trabalho usando o comando git rebase -i HEAD~2
		Obs: Este número é relativo a quantidade de commits realizados neste branch atual 
	9) Depois de todos esse passos estamos prontos para fazer o push no SEU BRANCH DE TRABALHO, desta vez usando git push -f
	10) Terminamos o processo de atualização. Verificar no repositório remot se as atualizações já foram realizadas e então faça um merge Request

	

************************************************************************************************************************************************

Sobre o Docker

-> Introdução
	O que são os containers?


*************************************************************************************************************************************************

*************************************************************************************************************************************************
Sobre Goroutines e Channels


*************************************************************************************************************************************************
	
************************************************************************************************************************************************

Download Insomnia
		 Metabooks 
Variáveis de Ambiente
Arquivos Teste
Docker Compose Up: Subir o docker

Links Necessários:
	https://github.com/spf13/cobra/blob/master/cobra.go
	https://github.com/kr/pretty
	https://github.com/golang/dep
	https://stackoverflow.com/questions/10748453/replace-comma-with-newline-in-sed
	https://dave.cheney.net/2014/10/17/functional-options-for-friendly-apis
	https://commandcenter.blogspot.com/2014/01/self-referential-functions-and-design.html
	https://zupzup.org/go-http-file-upload-download/
	https://stackoverflow.com/questions/44563088/http-request-get-file-name-from-url
	https://golangcode.com/download-a-file-from-a-url/
	http://www.cihanozhan.com/building-login-and-register-application-with-golang/
	https://www.sohamkamani.com/blog/2018/02/25/golang-password-authentication-and-storage/
	https://astaxie.gitbooks.io/build-web-application-with-golang/en/14.4.html
	https://www.sohamkamani.com/blog/2018/03/25/golang-session-authentication/
	https://tech.townsourced.com/post/anatomy-of-a-go-web-app/ Parte 1
	https://tech.townsourced.com/post/anatomy-of-a-go-web-app-authentication/ Parte 2
	https://gist.github.com/varver/f327ef9087ebf76aa4c4 Tutorial Login
	http://sandipbgt.com/2018/08/23/scraping-tutorial-with-golang/ Tutorial Login II
	https://www.devdungeon.com/content/web-scraping-go#log_in_to_website
	https://forum.golangbridge.org/t/using-http-client-how-to-make-requests-with-connection-keep-alive-header/5191


*************************************************************************************************************************************************
	
*************************************************************************************************************************************************
Leitura de Arquivo XML utilizando GoLang e Como executar o Parsing destes arquivos.




*************************************************************************************************************************************************

*************************************************************************************************************************************************
Vamos Aprender Sessions e Cookies e como utilizá-los em Golang (WEB application with Golang)

Referências: https://medium.com/@piraveenaparalogarajah/sessions-and-cookies-2c0919552f29
			 https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching?hl=pt-br
			 https://klauslaube.com.br/2012/05/14/o-cache-e-o-http.html
			 https://www.theodinproject.com/courses/ruby-on-rails/lessons/sessions-cookies-and-authentication
			 https://www.gorillatoolkit.org/pkg/sessions
			 https://developer.mozilla.org/en-US/docs/Web/HTTP/Overview

Sobre Protocolo HTTP
1) Sistema Cliente Servidor (Browser/Sites)
2) Stateless Protocol
3) Application Layer (TCP/IP)
4) Ações solicitadas pelos clientes que serão executadas pelo servidor (GET/POST/PUT/DELETE)
5) Retorno de Status dos Estados
6) Headers

Cache HTTP
	Conceito: O cache é uma espécie de depósito, onde os dados e processos utilizados mais frequentemente por um programa ficam armazenados
	na memória temporária do dispositivo, Assim, quanto mais você usa um determinado aplicativo, mais rápido ele deve abrir, o que poupa
	tempo e diminui o uso do hardware.







x O protocolo HTTP é dito stateless, isto é, o server não armazena informção sobre requisições passsadas. Dessa forma, por que quando 
trocamos de página em um website não necessitamos realizar login novamente? 
	Para isso utilizamos cookies.
*************************************************************************************************************************************************
